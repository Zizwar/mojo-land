-- Mojo Land v2.0 - Main endpoints table with AI support
-- This table stores dynamic API endpoint configurations

CREATE TABLE IF NOT EXISTS public.mojos (
  -- Primary fields
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid UUID DEFAULT gen_random_uuid() UNIQUE,

  -- Endpoint configuration
  endpoint TEXT UNIQUE NOT NULL,
  name TEXT,
  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'draft')),
  method TEXT NOT NULL, -- Single method or comma-separated: get,post,create,update,delete,function,rpc,sql
  methods JSONB, -- Advanced method configuration: {"get": {"permissions": "public"}}

  -- Database mapping
  "table" TEXT,
  columns TEXT, -- Comma-separated column names or 'all'
  "select" TEXT, -- Columns to return in queries
  selects TEXT, -- Alternative select field

  -- Permissions and security
  permissions JSONB, -- {"get": "public", "create": "user,admin", "update": "admin"}
  role TEXT, -- User field to filter by (e.g., "user_id" for row-level security)

  -- Query configuration
  filters JSONB, -- Allowed filters: {"eq": ["name", "status"], "like": ["description"]}
  single BOOLEAN DEFAULT false, -- Return single record

  -- Custom logic
  function TEXT, -- Dynamic function code to execute
  checker BOOLEAN DEFAULT false, -- Run function as middleware
  sql TEXT, -- SQL function name (deprecated, use rpc)
  rpc TEXT, -- PostgreSQL RPC function name

  -- Response configuration
  data JSONB, -- Static JSON data to return (for method='data')
  text TEXT, -- Static text to return (for method='text')
  csv BOOLEAN DEFAULT false, -- Return as CSV

  -- AI Configuration (NEW in v2.0)
  ai_enabled BOOLEAN DEFAULT false, -- Enable AI queries for this endpoint
  ai_config JSONB, -- AI settings: {"model": "gpt-4", "temperature": 0.7, "max_tokens": 2000}
  ai_prompt_template TEXT, -- Template for AI prompts
  ai_context_fields TEXT[], -- Fields to include in AI context

  -- Metadata
  title_ar TEXT,
  title_en TEXT,
  comment TEXT,
  version TEXT DEFAULT '2.0',

  -- Logging
  log BOOLEAN DEFAULT false,

  -- JWT configuration
  jwt JSONB,

  -- File handling
  files JSONB,

  -- Vector search (for AI)
  embedding TEXT,

  -- Timestamps and ownership
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by BIGINT REFERENCES users(id),
  updated_by BIGINT REFERENCES users(id),
  "userId" BIGINT REFERENCES users(id),

  -- Indexes for better performance
  CONSTRAINT mojos_pkey PRIMARY KEY (id),
  CONSTRAINT mojos_endpoint_key UNIQUE (endpoint),
  CONSTRAINT mojos_uuid_key UNIQUE (uuid)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_mojos_endpoint ON public.mojos(endpoint);
CREATE INDEX IF NOT EXISTS idx_mojos_status ON public.mojos(status);
CREATE INDEX IF NOT EXISTS idx_mojos_table ON public.mojos("table");
CREATE INDEX IF NOT EXISTS idx_mojos_ai_enabled ON public.mojos(ai_enabled) WHERE ai_enabled = true;
CREATE INDEX IF NOT EXISTS idx_mojos_user ON public.mojos("userId");

-- Create trigger to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_mojos_updated_at
  BEFORE UPDATE ON public.mojos
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) - Optional, uncomment to enable
-- ALTER TABLE public.mojos ENABLE ROW LEVEL SECURITY;

-- Policy: Anyone can read active endpoints
-- CREATE POLICY "Public endpoints are viewable by everyone"
--   ON public.mojos FOR SELECT
--   USING (status = 'active');

-- Policy: Only authenticated users can create endpoints
-- CREATE POLICY "Authenticated users can create endpoints"
--   ON public.mojos FOR INSERT
--   WITH CHECK (auth.role() = 'authenticated');

-- Policy: Only owners or admins can update
-- CREATE POLICY "Users can update their own endpoints"
--   ON public.mojos FOR UPDATE
--   USING (auth.uid() = "userId" OR auth.role() = 'admin');

-- Policy: Only owners or admins can delete
-- CREATE POLICY "Users can delete their own endpoints"
--   ON public.mojos FOR DELETE
--   USING (auth.uid() = "userId" OR auth.role() = 'admin');

-- Insert sample AI-enabled endpoint
INSERT INTO public.mojos (
  endpoint,
  name,
  method,
  "table",
  columns,
  "select",
  permissions,
  status,
  ai_enabled,
  ai_config,
  title_en,
  comment
) VALUES (
  'smart-search',
  'AI-Powered Smart Search',
  'post',
  'products',
  'all',
  'id,name,description,price,category',
  '{"post": "public"}',
  'active',
  true,
  '{"model": "openai/gpt-3.5-turbo", "temperature": 0.7, "max_tokens": 1000}',
  'Smart Search with AI',
  'Search products using natural language queries'
) ON CONFLICT (endpoint) DO NOTHING;

COMMENT ON TABLE public.mojos IS 'Dynamic API endpoints configuration with AI support';
COMMENT ON COLUMN public.mojos.ai_enabled IS 'Enable natural language queries via AI';
COMMENT ON COLUMN public.mojos.ai_config IS 'AI model configuration (model, temperature, max_tokens, etc.)';
COMMENT ON COLUMN public.mojos.ai_prompt_template IS 'Template for AI prompts with placeholders';
COMMENT ON COLUMN public.mojos.ai_context_fields IS 'Database fields to include in AI context';
