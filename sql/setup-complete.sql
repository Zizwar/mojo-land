-- Mojo Land v2.0 - Complete Database Setup
-- Run this file to set up all required tables and functions
-- Compatible with Supabase and PostgreSQL 12+

-- ============================================================
-- 1. USERS TABLE
-- ============================================================
CREATE TABLE IF NOT EXISTS public.users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid UUID DEFAULT gen_random_uuid() UNIQUE,
  username TEXT NOT NULL UNIQUE,
  email TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL,
  phone TEXT,
  token TEXT UNIQUE,
  image TEXT,
  status TEXT DEFAULT '',
  is_active BOOLEAN DEFAULT true,
  bio TEXT,
  firstname TEXT,
  lastname TEXT,
  address JSONB,
  comments TEXT,
  time INTEGER,
  jid TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT unique_email UNIQUE (email),
  CONSTRAINT unique_username UNIQUE (username),
  CONSTRAINT users_token_key UNIQUE (token)
);

CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);
CREATE INDEX IF NOT EXISTS idx_users_username ON public.users(username);
CREATE INDEX IF NOT EXISTS idx_users_token ON public.users(token);

-- ============================================================
-- 2. ROLES TABLE
-- ============================================================
CREATE TABLE IF NOT EXISTS public.role (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

  CONSTRAINT role_pkey PRIMARY KEY (id)
);

CREATE INDEX IF NOT EXISTS idx_role_name ON public.role(name);

-- Insert default roles
INSERT INTO public.role (name, description) VALUES
  ('admin', 'Administrator with full access'),
  ('user', 'Regular user'),
  ('guest', 'Guest user with limited access'),
  ('moderator', 'Moderator with elevated privileges')
ON CONFLICT (name) DO NOTHING;

-- ============================================================
-- 3. USER ROLES (Junction Table)
-- ============================================================
CREATE TABLE IF NOT EXISTS public.roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  role BIGINT NOT NULL REFERENCES role(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  udd BIGINT,

  CONSTRAINT roles_pkey PRIMARY KEY (id),
  CONSTRAINT unique_user_role UNIQUE (user_id, role)
);

CREATE INDEX IF NOT EXISTS idx_roles_user_id ON public.roles(user_id);
CREATE INDEX IF NOT EXISTS idx_roles_role ON public.roles(role);

-- ============================================================
-- 4. LOGS TABLE
-- ============================================================
CREATE TABLE IF NOT EXISTS public.logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  status TEXT,
  module TEXT,
  action TEXT,
  error JSONB,
  log TEXT,
  user_id BIGINT REFERENCES users(id),

  CONSTRAINT logs_pkey PRIMARY KEY (id)
);

CREATE INDEX IF NOT EXISTS idx_logs_created_at ON public.logs(created_at);
CREATE INDEX IF NOT EXISTS idx_logs_module ON public.logs(module);
CREATE INDEX IF NOT EXISTS idx_logs_action ON public.logs(action);

-- ============================================================
-- 5. LOOKUPS TABLE (Key-Value Store)
-- ============================================================
CREATE TABLE IF NOT EXISTS public.lookups (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  key TEXT UNIQUE NOT NULL,
  value JSONB,

  CONSTRAINT lookups_pkey PRIMARY KEY (id),
  CONSTRAINT lookups_key_unique UNIQUE (key)
);

CREATE INDEX IF NOT EXISTS idx_lookups_key ON public.lookups(key);

-- ============================================================
-- 6. MOJOS TABLE (Main Endpoints Configuration)
-- ============================================================
CREATE TABLE IF NOT EXISTS public.mojos (
  -- Primary fields
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid UUID DEFAULT gen_random_uuid() UNIQUE,

  -- Endpoint configuration
  endpoint TEXT UNIQUE NOT NULL,
  name TEXT,
  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'draft')),
  method TEXT NOT NULL,
  methods JSONB,

  -- Database mapping
  "table" TEXT,
  columns TEXT,
  "select" TEXT,
  selects TEXT,

  -- Permissions and security
  permissions JSONB,
  role TEXT,

  -- Query configuration
  filters JSONB,
  single BOOLEAN DEFAULT false,

  -- Custom logic
  function TEXT,
  checker BOOLEAN DEFAULT false,
  sql TEXT,
  rpc TEXT,

  -- Response configuration
  data JSONB,
  text TEXT,
  csv BOOLEAN DEFAULT false,

  -- AI Configuration (NEW in v2.0)
  ai_enabled BOOLEAN DEFAULT false,
  ai_config JSONB,
  ai_prompt_template TEXT,
  ai_context_fields TEXT[],

  -- Metadata
  title_ar TEXT,
  title_en TEXT,
  comment TEXT,
  version TEXT DEFAULT '2.0',
  prefix TEXT,

  -- Logging
  log BOOLEAN DEFAULT false,

  -- JWT configuration
  jwt JSONB,

  -- File handling
  files JSONB,

  -- Vector search
  embedding TEXT,

  -- Timestamps and ownership
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by BIGINT REFERENCES users(id),
  updated_by BIGINT REFERENCES users(id),
  "userId" BIGINT REFERENCES users(id),

  CONSTRAINT mojos_pkey PRIMARY KEY (id),
  CONSTRAINT mojos_endpoint_key UNIQUE (endpoint),
  CONSTRAINT mojos_uuid_key UNIQUE (uuid)
);

CREATE INDEX IF NOT EXISTS idx_mojos_endpoint ON public.mojos(endpoint);
CREATE INDEX IF NOT EXISTS idx_mojos_status ON public.mojos(status);
CREATE INDEX IF NOT EXISTS idx_mojos_table ON public.mojos("table");
CREATE INDEX IF NOT EXISTS idx_mojos_ai_enabled ON public.mojos(ai_enabled) WHERE ai_enabled = true;

-- ============================================================
-- 7. HELPER FUNCTIONS
-- ============================================================

-- Update timestamp trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON public.users
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_mojos_updated_at
  BEFORE UPDATE ON public.mojos
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Get table schema
CREATE OR REPLACE FUNCTION get_table_schema(table_name TEXT)
RETURNS TABLE (
  column_name TEXT,
  data_type TEXT,
  is_nullable TEXT,
  column_default TEXT
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    c.column_name::TEXT,
    c.data_type::TEXT,
    c.is_nullable::TEXT,
    c.column_default::TEXT
  FROM information_schema.columns c
  WHERE c.table_schema = 'public'
    AND c.table_name = get_table_schema.table_name
  ORDER BY c.ordinal_position;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Get all tables
CREATE OR REPLACE FUNCTION get_all_tables_schema()
RETURNS TABLE (
  table_name TEXT,
  column_count BIGINT
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    t.table_name::TEXT,
    COUNT(c.column_name) as column_count
  FROM information_schema.tables t
  LEFT JOIN information_schema.columns c
    ON t.table_name = c.table_name
    AND t.table_schema = c.table_schema
  WHERE t.table_schema = 'public'
    AND t.table_type = 'BASE TABLE'
  GROUP BY t.table_name
  ORDER BY t.table_name;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Execute safe SQL (SELECT only)
CREATE OR REPLACE FUNCTION execute_sql(sql_query TEXT)
RETURNS JSONB AS $$
DECLARE
  result JSONB;
BEGIN
  IF LOWER(TRIM(sql_query)) NOT LIKE 'select%' THEN
    RAISE EXCEPTION 'Only SELECT queries are allowed';
  END IF;

  IF sql_query ~* '\b(drop|delete|insert|update|alter|create|truncate|grant|revoke)\b' THEN
    RAISE EXCEPTION 'Query contains prohibited keywords';
  END IF;

  EXECUTE 'SELECT jsonb_agg(row_to_json(t)) FROM (' || sql_query || ') t'
  INTO result;

  RETURN COALESCE(result, '[]'::JSONB);
EXCEPTION
  WHEN OTHERS THEN
    RETURN jsonb_build_object('error', SQLERRM);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================================
-- 8. SAMPLE DATA
-- ============================================================

-- Sample user (password should be hashed in production)
INSERT INTO public.users (username, email, password, phone, token, is_active)
VALUES (
  'admin',
  'admin@mojoland.dev',
  'admin123', -- Change this and hash in production!
  '+1234567890',
  'sample_admin_token_' || gen_random_uuid(),
  true
) ON CONFLICT (username) DO NOTHING;

-- Assign admin role
INSERT INTO public.roles (user_id, role)
SELECT u.id, r.id
FROM public.users u, public.role r
WHERE u.username = 'admin' AND r.name = 'admin'
ON CONFLICT (user_id, role) DO NOTHING;

-- Sample endpoint
INSERT INTO public.mojos (
  endpoint,
  name,
  method,
  permissions,
  status,
  data,
  title_en,
  comment
) VALUES (
  'welcome',
  'Welcome Endpoint',
  'get',
  '{"get": "public"}',
  'active',
  '{"message": "Welcome to Mojo Land v2.0!", "version": "2.0.0", "features": ["AI-Powered", "Framework Agnostic", "Dynamic APIs"]}',
  'Welcome Message',
  'Simple welcome endpoint returning static JSON'
) ON CONFLICT (endpoint) DO NOTHING;

-- ============================================================
-- SETUP COMPLETE
-- ============================================================

-- Display setup summary
DO $$
BEGIN
  RAISE NOTICE '===========================================';
  RAISE NOTICE 'Mojo Land v2.0 Database Setup Complete!';
  RAISE NOTICE '===========================================';
  RAISE NOTICE 'Tables created:';
  RAISE NOTICE '  - users';
  RAISE NOTICE '  - role';
  RAISE NOTICE '  - roles';
  RAISE NOTICE '  - logs';
  RAISE NOTICE '  - lookups';
  RAISE NOTICE '  - mojos (with AI support)';
  RAISE NOTICE '';
  RAISE NOTICE 'Helper functions created:';
  RAISE NOTICE '  - get_table_schema()';
  RAISE NOTICE '  - get_all_tables_schema()';
  RAISE NOTICE '  - execute_sql()';
  RAISE NOTICE '';
  RAISE NOTICE 'Default admin user created:';
  RAISE NOTICE '  Username: admin';
  RAISE NOTICE '  Email: admin@mojoland.dev';
  RAISE NOTICE '  Password: admin123 (CHANGE THIS!)';
  RAISE NOTICE '';
  RAISE NOTICE 'Sample endpoint created: /api/welcome';
  RAISE NOTICE '===========================================';
END $$;
